I am receiving a segmentation fault (core dumped) when i run its output. where could the problem be arising from please.
main.h
#ifndef MAIN_H
#define MAIN_H

/*header libs*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <errno.h>
#include <limits.h>
#include <ctype.h>
#include <fcntl.h>

int main(int argc, char **argv);
/*void execute(char *command, char **argv);*/
void execute(char **args, int input_fd, int output_fd);
void execute_pipe(char **cm1, char **cm2);
void print_env();
char *get_cmd_path(char *cmd, char *env_path);
char **slice(char **tokens, int start, int end);
int no_tokens(char **tokens);
#end if

main_shell.c
#include "main.h"

/**
 * main - resturns the results of shell cmd
 * @argc: number of arguments
 * @argv: arg vector
 * Return: 0 on success and -1 on failure
 */

#define MAX_CMD_LEN 100
#define MAX_ARGS 10
int main(int argc, char **argv)
{
        FILE *fp;
        char command[MAX_CMD_LEN], *args[MAX_ARGS], *env_path = getenv("PATH");
        char *path_copy = malloc(strlen(env_path) + 1), *token, *cmd_path;
        int cmd_line, i = 0;
        strcpy(path_copy, env_path);

        /*non interactive mode*/
        if (argc > 1)
        {
                fp = fopen(argv[1], "r");
                if (fp == NULL)
                {
                        printf("Error opening file: %s\n", argv[1]);
                        exit(1);
                }
                while (fgets(command, MAX_CMD_LEN, fp) != NULL)
                {
                        cmd_line = strlen(command);
                       if (command[cmd_line - 1] == '\n')
                       {
                               command[cmd_line - 1] = '\0';
                       }

                       token = strtok(command, " ");

                       while (token != NULL)
                       {
                               args[i] = token;
                               i++;
                           token = strtok(NULL, " ");
                       }
                       args[i] = NULL;

                       if(strcmp(args[0], "env") == 0)
                       {
                               print_env();
                               continue;
                       }

                       if(strcmp(args[0], "exit") == 0)
                       {
                               free(path_copy);
                               exit(0);
                       }

                       cmd_path = get_cmd_path(args[0], path_copy);

                       if (cmd_path != NULL)
                       {
                               execute(cmd_path, args);
                       }
                       else
                       {
                               printf("%s: command not found\n", args[0]);
                       }
                }
                fclose(fp);
        }
         else
        {
                /*intereactive mode*/
                while (1)
                {
                        printf("$ ");

                        if(fgets(command, MAX_CMD_LEN, stdin) == NULL)
                        {
                                printf("\n");
                                break;
                        }

                        cmd_line = strlen(command);
                        if (command[cmd_line - 1] == '\n')
                        {
                                command[cmd_line - 1] = '\0';
                        }

                        if(strcmp(args[0], "exit") == 0)
                        {
                                free(path_copy);
                                exit(0);
                        }

                        if(strcmp(args[0], "env") == 0)
                        {
                                print_env();
                                exit(EXIT_SUCCESS);
                        }

                        token = strtok(command, " ");
                        i = 0;
                        while (token != NULL)
                        {
                                args[i] = token;
                                 i++;
                                token = strtok(NULL, " ");
                        }
                         cmd_path = get_cmd_path(args[0], path_copy);

                         if (cmd_path != NULL)
                         {
                                 execute(cmd_path, args);
                         }
                         else
                         {
                                 printf("%s: command not found\n", args[0]);
                         }
                }
        }
        free(path_copy);
        return (0);
}

execute_file.c
#include "main.h"
/**
 * execute - executes the cmd that users enter
 * @command: for non interactive mode
 * @argv: arguments entered by user
 */

void execute(char **args, int input_fd, int output_fd)
{
        pid_t pid;
        int status, pipefd[2], saved_stdout = dup(STDOUT_FILENO), saved_stdin = dup(STDIN_FILENO), i = 0;
        if (pipe(pipefd) == -1)
        {
                perror("pipe error");
                exit(EXIT_FAILURE);
        }

        while (args[i] != NULL)
        {
                if (strcmp(args[i], "<") == 0)
                {
                        input_fd = open(args[i + 1], O_RDONLY);
                        if (input_fd == -1)
                        {
                                perror("open error");
                                exit(EXIT_FAILURE);
                        }
                        args[i] = NULL;
                }

                else if (strcmp(args[i], ">") == 0)
                {
                        output_fd = open(args[i + 1], O_WRONLY | O_CREAT | O_TRUNC, 0666);
                        if (output_fd == -1)
                        {
                                perror("open error");
                                exit(EXIT_FAILURE);
                        }
                        args[i] = NULL;
                }
                  else if (strcmp(args[i], ">>") == 0)
                {
                        output_fd = open(args[i + 1], O_WRONLY | O_CREAT | O_APPEND, 0666);
                        if (output_fd == -1)
                        {
                                perror("open error");
                                exit(EXIT_FAILURE);
                        }
                        args[i] = NULL;
                }
                else if (strcmp(args[i], "|") == 0)
                {
                        args[i] = NULL;
                        if (dup2(pipefd[1], STDOUT_FILENO) == -1)
                        {
                                perror("dup2 error");
                                exit(EXIT_FAILURE);
                        }
                        if (close(pipefd[1]) == -1)
                        {
                                perror("close error");
                                exit(EXIT_FAILURE);
                        }

                        execute(args, input_fd, STDOUT_FILENO);
                        if (close(pipefd[0]) == -1)
                        {
                                perror("close error");
                                exit(EXIT_FAILURE);
                        }
                        if (dup2(saved_stdout, STDOUT_FILENO) == -1)
                        {
                         perror("dup2 error");
                                exit(EXIT_FAILURE);
                        }
                        return (NULL);
                }
                i++;
        }
        /*fork*/

        pid = fork();

        if (pid < 0)
        {
                perror("fork error");
                exit(EXIT_FAILURE);
        }
        else if (pid == 0)
        {
                /*Child process*/
                if (input_fd != STDIN_FILENO)
                {
                        if (dup2(input_fd, STDIN_FILENO) == -1)
                            {
                                perror("dup2 error");
                                exit(EXIT_FAILURE);
                        }
                }
                if (output_fd != STDOUT_FILENO)
                {
                        if (dup2(output_fd, STDOUT_FILENO) == -1)
                        {
                                perror("dup2 error");
                                exit(EXIT_FAILURE);
                        }
                }

                if (execve(args[0], args, environ) == -1)
                {
                        perror("execvp error");
                        exit(EXIT_FAILURE);
                }
        }
        else
        {
                do{
                        waitpid(pid, &status, WUNTRACED);
                } while (!WIFEXITED(status) && !WIFSIGNALED(status));

                if (dup2(saved_stdout, STDOUT_FILENO) == -1)
                {
                        perror("dup2 error");
                        exit(EXIT_FAILURE);
                }
                if (dup2(saved_stdin, STDIN_FILENO) == -1)
                  {
                        perror("dup2 error");
                        exit(EXIT_FAILURE);
                }

                if (input_fd != STDIN_FILENO)
                {
                        if (close(input_fd) == -1)
                        {
                                perror("close error");
                                exit(EXIT_FAILURE);
                        }
                }
                if (output_fd != STDOUT_FILENO)
                {
                        if (close(output_fd) == -1)
                        {
                                perror("close error");
                                exit(EXIT_FAILURE);
                        }
                }
        }
}

pping.c
#include "main.h"
/**
 *
 *
 */
void execute_pipe(char **cm1, char **cm2)
{
        int fd[2];
        pid_t pid;

        if (pipe(fd) == -1)
        {
                perror("Error: couldn't pipe");
                exit(EXIT_FAILURE);
        }

        pid = fork();

        if (pid == -1)
        {
                perror("Couldn't fork");
                exit(EXIT_FAILURE);
        }
        else if (pid == 0)
        {
                close(fd[0]);
                dup2(fd[1], STDOUT_FILENO);
                close(fd[1]);

                if(execve(cm1[0], cm1, environ) == -1)
                {
                        perror("Error: execve");
                        exit(EXIT_FAILURE);
                }
        }
        else
        {
                pid = fork();

                if (pid == -1)
                {
                        perror("Error: forking cmd 2");
                    exit(EXIT_FAILURE);
                }
                else if (pid == 0)
                {
                        close(fd[1]);
                        dup2(fd[0], STDIN_FILENO);
                        close(fd[0]);

                        if (execve(cm2[0], cm2, environ) == -1)
                        {
                                perror("Error: execve cm2");
                                exit(EXIT_FAILURE);
                        }
                }
                else
                {
                        close(fd[0]);
                        close(fd[1]);

                        waitpid(pid, NULL, 0);
                }
        }
}

cmdpath.c
#include "main.h"
/**
 *
 */
char *get_cmd_path(char *cmd, char *env_path)
{
        char *token = strtok(env_path, ":");

        while (token != NULL)
        {
                char *cmd_path = malloc(strlen(token) + strlen(cmd) + 2);
                sprintf(cmd_path, "%s%s", token, cmd);

                if (access(cmd_path, X_OK) == 0)
                {
                        return (cmd_path);
                }

                free(cmd_path);
                token = strtok(NULL, ":");
        }
        return (NULL);
}
void print_env()
{
        char **env = environ;

        while (*env)
        {
                printf("%s\n", *env);
                env++;
        }
}
